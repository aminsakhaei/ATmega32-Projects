;
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <stdio.h>
;
;unsigned int temp;
;
;unsigned int read_adc(unsigned char adc_input){
; 0000 0008 unsigned int read_adc(unsigned char adc_input){

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0009 ADMUX = adc_input | (1<<REFS0);
;PCODE: $0000000F VOL: 0
;	adc_input -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 000A delay_us(10);
;PCODE: $00000013 VOL: 0
; 0000 000B ADCSRA |= (1<<ADSC);
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 000C while (!(ADCSRA & (1<<ADIF)));
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 000D ADCSRA |= (1<<ADIF);
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 000E return ADCW;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 000F }
;PCODE: $00000021 VOL: 0
;
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;
;// USART Receiver buffer
;#define RX_BUFFER_SIZE 8
;char rx_buffer[RX_BUFFER_SIZE];
;
;#if RX_BUFFER_SIZE <= 256
;unsigned char rx_wr_index=0,rx_rd_index=0;
;#else
;unsigned int rx_wr_index=0,rx_rd_index=0;
;#endif
;
;#if RX_BUFFER_SIZE < 256
;unsigned char rx_counter=0;
;#else
;unsigned int rx_counter=0;
;#endif
;
;// This flag is set on USART Receiver buffer overflow
;bit rx_buffer_overflow;
;
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 002C {
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 002D char status,data;
; 0000 002E status=UCSRA;
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 002F data=UDR;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0030 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0031    {
; 0000 0032    rx_buffer[rx_wr_index++]=data;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0033 #if RX_BUFFER_SIZE == 256
; 0000 0034    // special case for receiver buffer size=256
; 0000 0035    if (++rx_counter == 0) rx_buffer_overflow=1;
; 0000 0036 #else
; 0000 0037    if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0038    if (++rx_counter == RX_BUFFER_SIZE)
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0039       {
; 0000 003A       rx_counter=0;
;PCODE: $0000003B VOL: 0
; 0000 003B       rx_buffer_overflow=1;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 003C       }
; 0000 003D #endif
; 0000 003E    }
;PCODE: $0000003F VOL: 0
; 0000 003F     temp = read_adc(0);
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0040     if(temp >= 0x02F6){
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0041     switch (data){
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0042     case 'F':                                   //fan
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0043     PORTC.1 = ~PORTC.1;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0044     break;
;PCODE: $00000055 VOL: 0
; 0000 0045 
; 0000 0046     case 'L':
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0047     PORTC.0 = ~PORTC.0;                         //lamp
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0048     break;
;PCODE: $00000063 VOL: 0
; 0000 0049 
; 0000 004A     case 'P':                                   //pink
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 004B     PORTD = 0b10100000;
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 004C     break;
;PCODE: $00000069 VOL: 0
; 0000 004D 
; 0000 004E     case 'W':                                   //white
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 004F     PORTD = 0b11100000;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0050     break;
;PCODE: $0000006F VOL: 0
; 0000 0051 
; 0000 0052     case 'B':                                   //black
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0053     PORTD = 0;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0054     break;
;PCODE: $00000075 VOL: 0
; 0000 0055 
; 0000 0056     case 'G':                                   //green
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 0057     PORTD = 0b01000000;
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 0058     break;
;PCODE: $0000007B VOL: 0
; 0000 0059     }
;PCODE: $0000007C VOL: 0
; 0000 005A     }
; 0000 005B }
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 0062 {
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 0063 char data;
; 0000 0064 while (rx_counter==0);
;PCODE: $00000084 VOL: 0
;	data -> R17
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 0065 data=rx_buffer[rx_rd_index++];
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 0066 #if RX_BUFFER_SIZE != 256
; 0000 0067 if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 0068 #endif
; 0000 0069 #asm("cli")
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
	cli
;PCODE: $00000095 VOL: 0
; 0000 006A --rx_counter;
;PCODE: $00000096 VOL: 0
; 0000 006B #asm("sei")
;PCODE: $00000097 VOL: 0
	sei
;PCODE: $00000098 VOL: 0
; 0000 006C return data;
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 006D }
;PCODE: $0000009C VOL: 0
;#pragma used-
;#endif
;
;void main(void)
; 0000 0072 {
;PCODE: $0000009D VOL: 0
; 0000 0073 //input & output ports
; 0000 0074 DDRC = 0x03;
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 0075 DDRD = 0xE0;
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 0076 
; 0000 0077 //ADC
; 0000 0078 ACSR = (1<<ACD);                                //Analog Comparator Disable
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 0079 ADMUX = (1<<REFS0) | (0<<REFS0);                //AVCC with external capacitor at AREF pin
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 007A ADCSRA = (1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (1<<ADPS1) | (0<<ADPS0);    //ADC Ena ...
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 007B 
; 0000 007C // USART initialization
; 0000 007D // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 007E // USART Receiver: On
; 0000 007F // USART Transmitter: On
; 0000 0080 // USART Mode: Asynchronous
; 0000 0081 // USART Baud Rate: 9600
; 0000 0082 UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 0083 UCSRB=(1<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 0084 UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 0085 UBRRH = 0x00;
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 0086 UBRRL = 0x33;
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 0087 
; 0000 0088 #asm("sei")
;PCODE: $000000B2 VOL: 0
	sei
;PCODE: $000000B3 VOL: 0
; 0000 0089 
; 0000 008A while (1)
;PCODE: $000000B4 VOL: 0
; 0000 008B     {
; 0000 008C     temp = read_adc(0);
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 008D     if(temp < 0x02F6){                         //Vin<3.7
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 008E     UDR = 'E';
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 008F     while(temp < 0x02F6);
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 0090     }
; 0000 0091     }
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 0092 }
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
